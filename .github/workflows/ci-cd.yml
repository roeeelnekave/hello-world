name: Hello World CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: roeeelnekave/hello-world
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true  # Disables telemetry during dotnet commands

jobs:
  versioning:
    name: Version Management
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   # Required to access full Git history for tag/versioning logic

    - name: Generate version from Git tags
      id: versioning
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        VERSION=${LATEST_TAG#v}

        # If HEAD is not tagged, generate a version with build suffix
        if ! git describe --exact-match --tags HEAD >/dev/null 2>&1; then
          if [ "${ACT}" = "true" ]; then
          # For local act runs â€“ append timestamp to version
            BUILD_NUMBER="$(date +"%Y-%m-%dT%H-%M-%S")"
            VERSION="${VERSION}-local.${BUILD_NUMBER}"
          else
            BUILD_NUMBER="${{ github.run_number }}"
            VERSION="${VERSION}-build.${BUILD_NUMBER}"
          fi
        fi

        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: versioning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache .NET packages
      if: env.ACT != 'true' # Skip cache when running locally with act
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release -p:Version=${{ needs.versioning.outputs.version }}

    - name: Upload build artifacts
      if: env.ACT != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: |
          **/bin/Release/
          **/obj/Release/
        retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [versioning, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      if: env.ACT != 'true'
      uses: actions/download-artifact@v4
      with:
        name: build-output

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests
      run: dotnet test --configuration Release --verbosity normal

  publish:
    name: Publish Application
    runs-on: ubuntu-latest
    needs: [versioning, build, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Publish application
      run: |
        dotnet publish App/App.csproj \
          --configuration Release \
          --output ./publish \
          -p:Version=${{ needs.versioning.outputs.version }}

    - name: Upload publish artifacts
      if: env.ACT != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-publish
        path: ./publish
        retention-days: 1

  docker-build-scan:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: [versioning, publish]
    permissions:
      contents: read
      security-events: write # Required for Trivy SARIF reporting (if later integrated)
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download publish artifacts
      if: env.ACT != 'true'
      uses: actions/download-artifact@v4
      with:
        name: dotnet-publish
        path: ./publish

    - name: Setup .NET (for act only)
      if: env.ACT == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore, Build and Publish locally (for act)
      if: env.ACT == 'true'
      run: |
        dotnet restore
        dotnet publish --configuration Release --output ./publish

    - name: Set up Docker Buildx  # Enables advanced docker build features (cache, multi-arch)
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (GitHub Actions only)
      if: env.ACT != 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.versioning.outputs.version }}
          type=raw,value=latest

    - name: Build and Push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.version }}
          ${{ env.IMAGE_NAME }}:latest
        labels: ${{ env.ACT != 'true' && steps.meta.outputs.labels || '' }}
        cache-from: ${{ env.ACT != 'true' && 'type=gha' || '' }} # Pull from GitHub cache when not running with act
        cache-to: ${{ env.ACT != 'true' && 'type=gha,mode=max' || '' }} # Save to GitHub cache
        build-args: |
          VERSION=${{ needs.versioning.outputs.version }}
        platforms: linux/amd64 # Forces build to x86_64 (for compatibility on ARM hosts like Apple Silicon)

    - name: Run Trivy vulnerability scanner
      if: env.ACT != 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.version }}'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1' 

  test-container:
    name: Test Container Output
    runs-on: ubuntu-latest
    needs: [versioning, docker-build-scan]

    steps:
    - name: Run container and verify output
      run: |
        OUTPUT=$(docker run --rm ${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.version }})
        echo "Container output: $OUTPUT"

        if [[ "$OUTPUT" == *"Hello World!"* ]]; then
          echo "Container test passed: Output contains 'Hello World!'"
        else
          echo "Container test failed: Output does not contain 'Hello World'"
          exit 1
        fi

  finalize:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [versioning, build, test, publish, docker-build-scan, test-container]
    if: always()

    steps:
    - name: Generate pipeline summary
      env:
        VERSION: ${{ needs.versioning.outputs.version }}
        DIGEST: ${{ needs.docker-build-scan.outputs.image-digest }}
        VERSIONING_STATUS: ${{ needs.versioning.result }}
        BUILD_STATUS: ${{ needs.build.result }}
        TEST_STATUS: ${{ needs.test.result }}
        PUBLISH_STATUS: ${{ needs.publish.result }}
        DOCKER_BUILD_STATUS: ${{ needs.docker-build-scan.result }}
        CONTAINER_TEST_STATUS: ${{ needs.test-container.result }}
      run: |
        echo "Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${VERSION:-N/A}" >> $GITHUB_STEP_SUMMARY
        echo "- Image: $IMAGE_NAME:${VERSION:-N/A}" >> $GITHUB_STEP_SUMMARY
        echo "- Registry: $REGISTRY" >> $GITHUB_STEP_SUMMARY
        echo "- Digest: ${DIGEST:-N/A}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "Job Status" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Versioning | ${VERSIONING_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${BUILD_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test | ${TEST_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "| Publish | ${PUBLISH_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build & Scan | ${DOCKER_BUILD_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Test | ${CONTAINER_TEST_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "Docker Pull Commands" >> $GITHUB_STEP_SUMMARY
        echo "docker pull $IMAGE_NAME:${VERSION:-latest}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull $IMAGE_NAME:latest" >> $GITHUB_STEP_SUMMARY

        echo "Pipeline Execution Summary"
        echo "Version: ${VERSION:-N/A}"
        echo ""
        echo "Job Status:"
        echo "  Versioning: ${VERSIONING_STATUS}"
        echo "  Build: ${BUILD_STATUS}"
        echo "  Test: ${TEST_STATUS}"
        echo "  Publish: ${PUBLISH_STATUS}"
        echo "  Docker Build & Scan: ${DOCKER_BUILD_STATUS}"
        echo "  Container Test: ${CONTAINER_TEST_STATUS}"