name: Hello World CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: roeeelnekave/hello-world

jobs:
  # Job 1 - Build, Test and Generate Version
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal
      
    # Generate semantic version from Git tags
    - name: Generate version
      id: versioning
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        VERSION=${LATEST_TAG#v}

        if ! git describe --exact-match --tags HEAD >/dev/null 2>&1; then
          BUILD_NUMBER=${{ github.run_number }}
          VERSION="${VERSION}-build.${BUILD_NUMBER}"
        fi

        echo "Generated version: $VERSION"

        echo "version=$VERSION" >> $GITHUB_OUTPUT


  containerise:
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.build-and-test.outputs.version }}
          type=raw,value=latest
          
    - name: Build Docker image (Multi-stage)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Upload Docker image (in GitHub Actions)
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-and-test, containerise]
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: docker load --input /tmp/image.tar
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4 - Push
  push-to-registry:
    runs-on: ubuntu-latest
    needs: [build-and-test, containerise, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: docker load --input /tmp/image.tar
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Push to Docker Hub
      run: |
        docker push ${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}
        docker push ${{ env.IMAGE_NAME }}:latest

  test-container:
    runs-on: ubuntu-latest
    needs: [build-and-test, containerise]
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: docker load --input /tmp/image.tar
      
    - name: Test container output
      run: |
        OUTPUT=$(docker run --rm ${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }})
        
        if [[ "$OUTPUT" == *"Hello World!"* ]]; then
          echo "Container test passed: Output contains 'Hello World!'"
        else
          echo "Container test failed: Output does not contain 'Hello World!'"
          exit 1
        fi
